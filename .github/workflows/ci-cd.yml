name: Titanic ML Challenge CI/CD

on:
  pull_request:
    branches: [ staging ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          mkdir -p ~/.kaggle
          echo '{"username":"${{ secrets.KAGGLE_USERNAME }}","key":"${{ secrets.KAGGLE_KEY }}"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Create model files
        run: |
          mkdir -p models/
          kaggle competitions download -c titanic
          unzip titanic.zip -d titanic/
          python main.py
      
      - name: Run server
        run: |
          uvicorn api:app --host 0.0.0.0 --port 8000 &
          sleep 5
  
      - name: Run tests
        env:
          TITANIC_API_KEY: ${{ secrets.TITANIC_API_KEY }}
        run: |
          echo "TITANIC_API_KEY=${{ secrets.TITANIC_API_KEY }}" > .env
          pytest test_api.py
      
      - name: Build API Docker image
        run: docker build -f Dockerfile.api -t titanic-api .
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push images
        run: |
          docker tag titanic-api ${{ secrets.DOCKERHUB_USERNAME }}/titanic-api:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanic-api:latest
      
      - name: Copy models to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "models/*.pkl"
          target: "~/titanic"
      
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop and remove previous container if exists
            docker ps --filter "publish=8000" --format "{{.ID}}" | xargs -r docker stop
            docker ps -a --filter "status=exited" --format "{{.ID}}" | xargs -r docker rm

            # Pull latest image from DockerHub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/titanic-api:latest
            docker run -d --name titanic-api -p 8000:8000 -v ~/titanic/models:/app/models --env-file ~/titanic/.env ${{ secrets.DOCKERHUB_USERNAME }}/titanic-api

